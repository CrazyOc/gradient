process.on("unhandledRejection",a=>{throw a});const{Octokit}=require("@octokit/action"),octokit=new Octokit,[owner,repo]=process.env.GITHUB_REPOSITORY.split("/"),fs=require("fs").promises,{exec}=require("child-process-promise");(async()=>{const a=await parseInt(process.env.event_number);console.log(a);const b=await octokit.request(`GET /repos/:owner/:repo/issues/${a}`,{owner,repo});console.log(b);const{data:c}=b,d=await fs.readFile("./database.css");console.log(d),console.log(c.body);const e=await JSON.parse(unescape(b.data.body));console.log(e);let f=e.angle?`
    /*${e.username}*/
  [user_by_bdfdb*="${e.userID}"],
  [data-user-id*="${e.userID}"],
  [data-author-id*="${e.userID}"] {
    --name-dummy-transparent: transparent; --name-dummy-1: 1;
    --name-gradient: ${e.color1}, ${e.color2};
    --name-gradient-angle: ${e.angle};
  }
  `:`
    /*${e.username}*/
  [user_by_bdfdb*="${e.userID}"],
  [data-user-id*="${e.userID}"],
  [data-author-id*="${e.userID}"] {
    --name-dummy-transparent: transparent; --name-dummy-1: 1;
    --name-gradient: ${e.color1}, ${e.color2};
  }
  `;const g=`${d}\n\n\n${f}`;console.log(g),await fs.appendFile("./database.css",f),await octokit.request(`PATCH /repos/:owner/:repo/issues/${a}`,{owner,repo,state:"closed"});const{stdout:h}=await exec("git add ./database.css");console.log(h);const{stdout2:i}=await exec(`git commit -m "Add ${e.username}"`);console.log(i),console.log("Done!")})();